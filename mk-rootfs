#!/bin/sh
#
# SPDX-FileCopyrightText: 2020 Anuradha Weeraman <anuradha@weeraman.com>
# SPDX-License-Identifier: GPL-3.0-or-later

set -e

basedir=$(dirname $(readlink -f $0))
. ${basedir}/config/env.sh

check_availability_of() {
  prog=$1
  if ! command -v ${prog} 2>&1 > /dev/null; then
    echo "$prog not found in path. Please install and try again."
    exit 1
  fi
}

log_status() {
  status=$1
  if [ $status -ne 0 ]; then
    echo "failed."
    exit 1
  else
    echo "ok."
  fi
}

check_availability_of sudo
check_availability_of qemu-img
check_availability_of /sbin/mkfs.ext4
check_availability_of /sbin/debootstrap

if [ -e "${basedir}/rootfs.img" ]; then
  echo -n "Proceed to recreate ${basedir}/rootfs.img (y/N)? "
  read input
  if [ "$input" != "y" ]; then
    exit 1
  fi
fi

echo -n "Creating ${rootfs_size} disk image... "
qemu-img create ${basedir}/rootfs.img ${rootfs_size} >> ${basedir}/log 2>&1
log_status $?

echo -n "Creating ext4 filesystem... "
/sbin/mkfs.ext4 ${basedir}/rootfs.img >> ${basedir}/log 2>&1
log_status $?

if [ ! -e ${rootfs} ]; then
  echo "Creating ${rootfs}..."
  sudo mkdir ${rootfs}
fi

echo "Mounting ${basedir}/rootfs.img... "
sudo umount ${rootfs} >> ${basedir}/log 2>&1 || true
sudo mount -o loop ${basedir}/rootfs.img ${rootfs}

echo "Bootstrapping filesystem... "
sudo /sbin/debootstrap unstable ${rootfs} http://deb.debian.org/debian/ >> ${basedir}/log 2>&1

echo "Setting hostname: ${hostname}... "
sudo sh -c "echo '${hostname}' > ${rootfs}/etc/hostname"

echo "Setting the root password... "
sudo sh -c "chroot ${rootfs} passwd root"

if [ ! -z "${packages_to_install}" ]; then
  echo "Running apt update... "
  sudo sh -c "chroot ${rootfs} apt update" >> ${basedir}/log 2>&1
  echo "Installing packages: ${packages_to_install}... "
  sudo chroot ${rootfs} /bin/sh -c "export TMPDIR=/tmp; apt install -y ${packages_to_install}" >> ${basedir}/log 2>&1
fi

sudo cp ${confdir}/dhcp.network ${rootfs}/etc/systemd/network/

echo "Enabling systemd-networkd.service... "
sudo sh -c "chroot ${rootfs} systemctl enable systemd-networkd.service" >> ${basedir}/log 2>&1

echo "Enabling systemd-resolved.service... "
sudo sh -c "chroot ${rootfs} systemctl enable systemd-resolved.service" >> ${basedir}/log 2>&1

echo "Unmounting ${rootfs}... "
sudo umount ${rootfs}

echo "Deleting ${rootfs}... "
sudo rmdir ${rootfs}
